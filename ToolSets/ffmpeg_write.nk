set cut_paste_input [stack 0]
version 11.1 v2
push $cut_paste_input
NoOp {
name ffmpeg_write
onCreate "n = nuke.thisNode()\n#Set fps on create\nn\['fps'].setValue(nuke.root().fps())\n\n"
knobChanged "import os\nimport re\nimport nukescripts\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\ni = n\['inFile']\no = n\['outFile']\np = n\['prefix']\nf = n\['fileName']\ns = n\['suffix']\ne = n\['env']\nep = n\['envPath']\nop = n\['outPreview']\ncp = n\['cmdPreview']\nc = \['.mov', '.mp4']\nco = \['libx264', 'libx265']\ncs = \['gamma22', 'linear']\n\n#Set values when input gets connected\nif n.input(0) and os.path.isfile(n.input(0)\['file'].evaluate()):\n    if not i.value():\n        i.setValue(nukescripts.replaceHashes(nuke.filename(n.input(0))))\n    if not o.value():\n        o.setValue(os.path.dirname(nukescripts.replaceHashes(i.value()))+'/')\n    if not f.value():\n        f.setValue(re.sub(r'.%.*d.exr', \"\", os.path.basename(nukescripts.replaceHashes(i.value()))))\n\n#Custom ffmpeg path\nif e.value():\n    ep.setVisible(True)\nelse:\n    ep.setFlag(0x40000)\n\n#Set output preview\nif i.value() and o.value():\n    if i.value() or o.value():\n        name = ''.join((o.value()+p.value(), f.value(), s.value())) + c\[int(n\['fileType'].getValue())]\n    else:\n        name = o.value()+f.value() + c\[n\['fileType'].getValue()]\n    op.setValue(name)\nelse:\n    op.setValue('')\n\n#Set command preview\nif i.value() and o.value() and f.value():\n    if e.value() and not os.path.isfile(ep.value()):\n        cp.setValue('')\n    elif not e.value():\n        if e.value():\n            args = ep.value() + ' '\n        else:\n            args = 'ffmpeg '\n            \n        if n\['audio'].value():\n            args += '-i ' + re.escape(n\['audio'].evaluate())\n        args+=  ' -apply_trc ' + cs\[int(n\['colorspace'].getValue())] \\\n            +   ' -framerate ' + str(int(n\['fps'].value())) \\\n            +   ' -i '         + re.escape(i.value()) \\\n            +   ' -c:v '       + co\[int(n\['codec'].getValue())] \\\n            +   ' -crf '       + str(int(n\['crf'].value())) \\\n            +   ' -pix_fmt yuv420p' \\\n            +   ' '            + re.escape(op.value())\n        cp.setValue(args)\nelse:\n    cp.setValue('')"
tile_color 0xdfff00ff
selected true
xpos -12770
ypos 11237
addUserKnob {20 writeTab l Write}
addUserKnob {26 ffmpegNote l Note: T "This gizmo requires FFmpeg installed."}
addUserKnob {26 div0 l "" +STARTLINE}
addUserKnob {2 inFile l "Input file"}
addUserKnob {2 outFile l "Output Folder"}
addUserKnob {26 div1 l "Name Options"}
addUserKnob {1 prefix l Prefix}
addUserKnob {1 suffix l Suffix -STARTLINE}
addUserKnob {1 fileName l Filename}
addUserKnob {26 div2 l Options}
addUserKnob {4 fileType l "file type" M {mov mp4}}
addUserKnob {4 codec -STARTLINE M {H.264 H.265 ""}}
addUserKnob {22 clear l Clear -STARTLINE T "n = nuke.thisNode()\nfor k in (n\['inFile'], n\['outFile'], n\['prefix'], n\['suffix'], n\['fileName'], n\['audio'], n\['outPreview']):\n    k.setValue('')"}
addUserKnob {4 colorspace M {Gamma2.2 Linear ""}}
addUserKnob {3 fps}
fps 24
addUserKnob {3 crf -STARTLINE}
addUserKnob {2 audio l "audio file"}
addUserKnob {26 div3 l Render}
addUserKnob {6 env l "Custom FFmpeg path" +STARTLINE}
addUserKnob {2 envPath l "FFmpeg path" +HIDDEN}
addUserKnob {26 div4 l "" +STARTLINE}
addUserKnob {26 outPreview l "Output preview" T ""}
addUserKnob {26 cmdPreview l "Command preview" T ""}
addUserKnob {22 previewPop l Preview T "n = nuke.thisNode()\nop = n\['outPreview'].value()\ncp = n\['cmdPreview'].value()\n\nif op or cp:\n    nuke.message(\"Output: \" + op + '\\n \\n' + \"Command: \" + cp)\nelse:\n    pass" +STARTLINE}
addUserKnob {22 execute l Render T "import os\n\nn = nuke.thisNode()\nargs = n\['cmdPreview'].value()\nstart = \"gnome-terminal -e 'bash -c \\\"\" + args + '; bash\"\\''\nif args:\n    os.popen(start)\nelse:\n    nuke.message('Settings incomplete!')" +STARTLINE}
addUserKnob {20 info l Info}
addUserKnob {26 installation l "Install FFmpeg"}
addUserKnob {22 installFFmpeg l "Install FFmpeg" T "import platform\nimport webbrowser\nif platform.system() == \"Windows\":\n    webbrowser.open(\"https://www.ffmpeg.org/download.html#build-windows\")\nif platform.system() == \"Linux\":\n    webbrowser.open(\"https://www.ffmpeg.org/download.html#build-linux\")" +STARTLINE}
addUserKnob {26 updateFFmpeg l "Compile/Update FFmpeg"}
addUserKnob {22 ffmpegUpdate l "Update FFmpeg" t "For some ffmpeg option you need the latest ffmpeg. If the launched terminal tells you there's unrecognized option, try follow this guide to update your ffmpeg." T "import webbrowser; webbrowser.open('https://trac.ffmpeg.org/wiki/CompilationGuide/Centos')" +STARTLINE}
addUserKnob {26 ffmpegInfo l "Encode/H.264 - FFmpeg"}
addUserKnob {22 ffmpeg264 l H.264 T "import webbrowser; webbrowser.open('https://trac.ffmpeg.org/wiki/Encode/H.264/')" +STARTLINE}
addUserKnob {22 ffmpeg265 l H.265 -STARTLINE T "import webbrowser; webbrowser.open('https://trac.ffmpeg.org/wiki/Encode/H.265')"}
addUserKnob {26 created l "Created By"}
addUserKnob {22 creator l jeangjenq.com T "import webbrowser; webbrowser.open('http://www.jeangjenq.com/')" +STARTLINE}
}
